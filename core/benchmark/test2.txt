# JMH version: 1.37
# VM version: JDK 11.0.2, OpenJDK 64-Bit Server VM, 11.0.2+9
# VM invoker: /home/amogh-jahagirdar/.asdf/installs/java/openjdk-11.0.2/bin/java
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/home/amogh-jahagirdar/workspace/iceberg/core/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 20 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.apache.iceberg.DatafileSetBenchmark.benchmarkSetAdds
# Parameters: (benchmarkHashSet = true)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.824 s/op
# Warmup Iteration   2: 0.456 s/op
# Warmup Iteration   3: 0.224 s/op
Iteration   1: 0.290 s/op
Iteration   2: 0.290 s/op
Iteration   3: 0.256 s/op
Iteration   4: 0.249 s/op
Iteration   5: 0.286 s/op


Result "org.apache.iceberg.DatafileSetBenchmark.benchmarkSetAdds":
  N = 5
  mean =      0.274 ±(99.9%) 0.076 s/op

  Histogram, s/op:
    [0.240, 0.245) = 0 
    [0.245, 0.250) = 1 
    [0.250, 0.255) = 0 
    [0.255, 0.260) = 1 
    [0.260, 0.265) = 0 
    [0.265, 0.270) = 0 
    [0.270, 0.275) = 0 
    [0.275, 0.280) = 0 
    [0.280, 0.285) = 0 
    [0.285, 0.290) = 2 
    [0.290, 0.295) = 1 

  Percentiles, s/op:
      p(0.0000) =      0.249 s/op
     p(50.0000) =      0.286 s/op
     p(90.0000) =      0.290 s/op
     p(95.0000) =      0.290 s/op
     p(99.0000) =      0.290 s/op
     p(99.9000) =      0.290 s/op
     p(99.9900) =      0.290 s/op
     p(99.9990) =      0.290 s/op
     p(99.9999) =      0.290 s/op
    p(100.0000) =      0.290 s/op


# JMH version: 1.37
# VM version: JDK 11.0.2, OpenJDK 64-Bit Server VM, 11.0.2+9
# VM invoker: /home/amogh-jahagirdar/.asdf/installs/java/openjdk-11.0.2/bin/java
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/home/amogh-jahagirdar/workspace/iceberg/core/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 20 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.apache.iceberg.DatafileSetBenchmark.benchmarkSetAdds
# Parameters: (benchmarkHashSet = false)

# Run progress: 50.00% complete, ETA 00:00:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.755 s/op
# Warmup Iteration   2: 0.260 s/op
# Warmup Iteration   3: 0.221 s/op
Iteration   1: 0.205 s/op
Iteration   2: 0.179 s/op
Iteration   3: 0.220 s/op
Iteration   4: 0.249 s/op
Iteration   5: 0.149 s/op


Result "org.apache.iceberg.DatafileSetBenchmark.benchmarkSetAdds":
  N = 5
  mean =      0.200 ±(99.9%) 0.147 s/op

  Histogram, s/op:
    [0.140, 0.150) = 1 
    [0.150, 0.160) = 0 
    [0.160, 0.170) = 0 
    [0.170, 0.180) = 1 
    [0.180, 0.190) = 0 
    [0.190, 0.200) = 0 
    [0.200, 0.210) = 1 
    [0.210, 0.220) = 1 
    [0.220, 0.230) = 0 
    [0.230, 0.240) = 0 

  Percentiles, s/op:
      p(0.0000) =      0.149 s/op
     p(50.0000) =      0.205 s/op
     p(90.0000) =      0.249 s/op
     p(95.0000) =      0.249 s/op
     p(99.0000) =      0.249 s/op
     p(99.9000) =      0.249 s/op
     p(99.9900) =      0.249 s/op
     p(99.9990) =      0.249 s/op
     p(99.9999) =      0.249 s/op
    p(100.0000) =      0.249 s/op


# Run complete. Total time: 00:00:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                              (benchmarkHashSet)  Mode  Cnt  Score   Error  Units
DatafileSetBenchmark.benchmarkSetAdds                true    ss    5  0.274 ± 0.076   s/op
DatafileSetBenchmark.benchmarkSetAdds               false    ss    5  0.200 ± 0.147   s/op

Benchmark result is saved to /home/amogh-jahagirdar/workspace/iceberg/core/build/reports/jmh/results.json
