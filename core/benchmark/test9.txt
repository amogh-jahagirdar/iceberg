# JMH version: 1.37
# VM version: JDK 11.0.2, OpenJDK 64-Bit Server VM, 11.0.2+9
# VM invoker: /home/amogh-jahagirdar/.asdf/installs/java/openjdk-11.0.2/bin/java
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/home/amogh-jahagirdar/workspace/iceberg/core/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 20 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.apache.iceberg.DatafileSetBenchmark.benchmarkSetAdds
# Parameters: (benchmarkHashSet = false)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3.341 s/op
# Warmup Iteration   2: 2.072 s/op
# Warmup Iteration   3: 2.799 s/op
Iteration   1: 2.640 s/op
Iteration   2: 2.596 s/op
Iteration   3: 2.629 s/op
Iteration   4: 2.563 s/op
Iteration   5: 1.823 s/op


Result "org.apache.iceberg.DatafileSetBenchmark.benchmarkSetAdds":
  N = 5
  mean =      2.450 ±(99.9%) 1.356 s/op

  Histogram, s/op:
    [1.800, 1.850) = 1 
    [1.850, 1.900) = 0 
    [1.900, 1.950) = 0 
    [1.950, 2.000) = 0 
    [2.000, 2.050) = 0 
    [2.050, 2.100) = 0 
    [2.100, 2.150) = 0 
    [2.150, 2.200) = 0 
    [2.200, 2.250) = 0 
    [2.250, 2.300) = 0 
    [2.300, 2.350) = 0 
    [2.350, 2.400) = 0 
    [2.400, 2.450) = 0 
    [2.450, 2.500) = 0 
    [2.500, 2.550) = 0 
    [2.550, 2.600) = 2 
    [2.600, 2.650) = 2 

  Percentiles, s/op:
      p(0.0000) =      1.823 s/op
     p(50.0000) =      2.596 s/op
     p(90.0000) =      2.640 s/op
     p(95.0000) =      2.640 s/op
     p(99.0000) =      2.640 s/op
     p(99.9000) =      2.640 s/op
     p(99.9900) =      2.640 s/op
     p(99.9990) =      2.640 s/op
     p(99.9999) =      2.640 s/op
    p(100.0000) =      2.640 s/op


# JMH version: 1.37
# VM version: JDK 11.0.2, OpenJDK 64-Bit Server VM, 11.0.2+9
# VM invoker: /home/amogh-jahagirdar/.asdf/installs/java/openjdk-11.0.2/bin/java
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/home/amogh-jahagirdar/workspace/iceberg/core/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 20 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.apache.iceberg.DatafileSetBenchmark.benchmarkSetAdds
# Parameters: (benchmarkHashSet = true)

# Run progress: 50.00% complete, ETA 00:00:21
# Fork: 1 of 1
# Warmup Iteration   1: 3.231 s/op
# Warmup Iteration   2: 2.162 s/op
# Warmup Iteration   3: 2.223 s/op
Iteration   1: 2.302 s/op
Iteration   2: 2.844 s/op
Iteration   3: 1.428 s/op
Iteration   4: 1.416 s/op
Iteration   5: 2.514 s/op


Result "org.apache.iceberg.DatafileSetBenchmark.benchmarkSetAdds":
  N = 5
  mean =      2.101 ±(99.9%) 2.500 s/op

  Histogram, s/op:
    [1.000, 1.125) = 0 
    [1.125, 1.250) = 0 
    [1.250, 1.375) = 0 
    [1.375, 1.500) = 2 
    [1.500, 1.625) = 0 
    [1.625, 1.750) = 0 
    [1.750, 1.875) = 0 
    [1.875, 2.000) = 0 
    [2.000, 2.125) = 0 
    [2.125, 2.250) = 0 
    [2.250, 2.375) = 1 
    [2.375, 2.500) = 0 
    [2.500, 2.625) = 1 
    [2.625, 2.750) = 0 
    [2.750, 2.875) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.416 s/op
     p(50.0000) =      2.302 s/op
     p(90.0000) =      2.844 s/op
     p(95.0000) =      2.844 s/op
     p(99.0000) =      2.844 s/op
     p(99.9000) =      2.844 s/op
     p(99.9900) =      2.844 s/op
     p(99.9990) =      2.844 s/op
     p(99.9999) =      2.844 s/op
    p(100.0000) =      2.844 s/op


# Run complete. Total time: 00:00:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                              (benchmarkHashSet)  Mode  Cnt  Score   Error  Units
DatafileSetBenchmark.benchmarkSetAdds               false    ss    5  2.450 ± 1.356   s/op
DatafileSetBenchmark.benchmarkSetAdds                true    ss    5  2.101 ± 2.500   s/op

Benchmark result is saved to /home/amogh-jahagirdar/workspace/iceberg/core/build/reports/jmh/results.json
