# JMH version: 1.37
# VM version: JDK 11.0.2, OpenJDK 64-Bit Server VM, 11.0.2+9
# VM invoker: /home/amogh-jahagirdar/.asdf/installs/java/openjdk-11.0.2/bin/java
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/home/amogh-jahagirdar/workspace/iceberg/core/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 20 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.apache.iceberg.DatafileSetBenchmark.benchmarkSetAdds
# Parameters: (benchmarkHashSet = false)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3.939 s/op
# Warmup Iteration   2: 2.434 s/op
# Warmup Iteration   3: 2.021 s/op
Iteration   1: 2.600 s/op
Iteration   2: 1.879 s/op
Iteration   3: 1.893 s/op
Iteration   4: 1.884 s/op
Iteration   5: 1.765 s/op


Result "org.apache.iceberg.DatafileSetBenchmark.benchmarkSetAdds":
  N = 5
  mean =      2.004 ±(99.9%) 1.299 s/op

  Histogram, s/op:
    [1.700, 1.800) = 1 
    [1.800, 1.900) = 3 
    [1.900, 2.000) = 0 
    [2.000, 2.100) = 0 
    [2.100, 2.200) = 0 
    [2.200, 2.300) = 0 
    [2.300, 2.400) = 0 
    [2.400, 2.500) = 0 
    [2.500, 2.600) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.765 s/op
     p(50.0000) =      1.884 s/op
     p(90.0000) =      2.600 s/op
     p(95.0000) =      2.600 s/op
     p(99.0000) =      2.600 s/op
     p(99.9000) =      2.600 s/op
     p(99.9900) =      2.600 s/op
     p(99.9990) =      2.600 s/op
     p(99.9999) =      2.600 s/op
    p(100.0000) =      2.600 s/op


# JMH version: 1.37
# VM version: JDK 11.0.2, OpenJDK 64-Bit Server VM, 11.0.2+9
# VM invoker: /home/amogh-jahagirdar/.asdf/installs/java/openjdk-11.0.2/bin/java
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/home/amogh-jahagirdar/workspace/iceberg/core/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 20 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.apache.iceberg.DatafileSetBenchmark.benchmarkSetAdds
# Parameters: (benchmarkHashSet = true)

# Run progress: 50.00% complete, ETA 00:00:19
# Fork: 1 of 1
# Warmup Iteration   1: 3.418 s/op
# Warmup Iteration   2: 2.351 s/op
# Warmup Iteration   3: 2.936 s/op
Iteration   1: 2.302 s/op
Iteration   2: 2.038 s/op
Iteration   3: 2.353 s/op
Iteration   4: 2.535 s/op
Iteration   5: 2.288 s/op


Result "org.apache.iceberg.DatafileSetBenchmark.benchmarkSetAdds":
  N = 5
  mean =      2.303 ±(99.9%) 0.685 s/op

  Histogram, s/op:
    [2.000, 2.050) = 1 
    [2.050, 2.100) = 0 
    [2.100, 2.150) = 0 
    [2.150, 2.200) = 0 
    [2.200, 2.250) = 0 
    [2.250, 2.300) = 1 
    [2.300, 2.350) = 1 
    [2.350, 2.400) = 1 
    [2.400, 2.450) = 0 
    [2.450, 2.500) = 0 
    [2.500, 2.550) = 1 
    [2.550, 2.600) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.038 s/op
     p(50.0000) =      2.302 s/op
     p(90.0000) =      2.535 s/op
     p(95.0000) =      2.535 s/op
     p(99.0000) =      2.535 s/op
     p(99.9000) =      2.535 s/op
     p(99.9900) =      2.535 s/op
     p(99.9990) =      2.535 s/op
     p(99.9999) =      2.535 s/op
    p(100.0000) =      2.535 s/op


# Run complete. Total time: 00:00:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                              (benchmarkHashSet)  Mode  Cnt  Score   Error  Units
DatafileSetBenchmark.benchmarkSetAdds               false    ss    5  2.004 ± 1.299   s/op
DatafileSetBenchmark.benchmarkSetAdds                true    ss    5  2.303 ± 0.685   s/op

Benchmark result is saved to /home/amogh-jahagirdar/workspace/iceberg/core/build/reports/jmh/results.json
