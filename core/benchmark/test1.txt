# JMH version: 1.37
# VM version: JDK 11.0.2, OpenJDK 64-Bit Server VM, 11.0.2+9
# VM invoker: /home/amogh-jahagirdar/.asdf/installs/java/openjdk-11.0.2/bin/java
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/home/amogh-jahagirdar/workspace/iceberg/core/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 20 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.apache.iceberg.DatafileSetBenchmark.benchmarkSetAdds
# Parameters: (benchmarkHashSet = true)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.942 s/op
# Warmup Iteration   2: 0.158 s/op
# Warmup Iteration   3: 0.160 s/op
Iteration   1: 0.137 s/op
Iteration   2: 0.104 s/op
Iteration   3: 0.093 s/op
Iteration   4: 0.168 s/op
Iteration   5: 0.114 s/op


Result "org.apache.iceberg.DatafileSetBenchmark.benchmarkSetAdds":
  N = 5
  mean =      0.123 ±(99.9%) 0.115 s/op

  Histogram, s/op:
    [0.090, 0.095) = 1 
    [0.095, 0.100) = 0 
    [0.100, 0.105) = 1 
    [0.105, 0.110) = 0 
    [0.110, 0.115) = 1 
    [0.115, 0.120) = 0 
    [0.120, 0.125) = 0 
    [0.125, 0.130) = 0 
    [0.130, 0.135) = 0 
    [0.135, 0.140) = 1 
    [0.140, 0.145) = 0 
    [0.145, 0.150) = 0 
    [0.150, 0.155) = 0 
    [0.155, 0.160) = 0 
    [0.160, 0.165) = 0 
    [0.165, 0.170) = 1 

  Percentiles, s/op:
      p(0.0000) =      0.093 s/op
     p(50.0000) =      0.114 s/op
     p(90.0000) =      0.168 s/op
     p(95.0000) =      0.168 s/op
     p(99.0000) =      0.168 s/op
     p(99.9000) =      0.168 s/op
     p(99.9900) =      0.168 s/op
     p(99.9990) =      0.168 s/op
     p(99.9999) =      0.168 s/op
    p(100.0000) =      0.168 s/op


# JMH version: 1.37
# VM version: JDK 11.0.2, OpenJDK 64-Bit Server VM, 11.0.2+9
# VM invoker: /home/amogh-jahagirdar/.asdf/installs/java/openjdk-11.0.2/bin/java
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/home/amogh-jahagirdar/workspace/iceberg/core/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 20 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.apache.iceberg.DatafileSetBenchmark.benchmarkSetAdds
# Parameters: (benchmarkHashSet = false)

# Run progress: 50.00% complete, ETA 00:00:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.607 s/op
# Warmup Iteration   2: 0.274 s/op
# Warmup Iteration   3: 0.180 s/op
Iteration   1: 0.110 s/op
Iteration   2: 0.146 s/op
Iteration   3: 0.107 s/op
Iteration   4: 0.131 s/op
Iteration   5: 0.123 s/op


Result "org.apache.iceberg.DatafileSetBenchmark.benchmarkSetAdds":
  N = 5
  mean =      0.123 ±(99.9%) 0.062 s/op

  Histogram, s/op:
    [0.100, 0.103) = 0 
    [0.103, 0.105) = 0 
    [0.105, 0.108) = 1 
    [0.108, 0.110) = 1 
    [0.110, 0.113) = 0 
    [0.113, 0.115) = 0 
    [0.115, 0.118) = 0 
    [0.118, 0.120) = 0 
    [0.120, 0.123) = 0 
    [0.123, 0.125) = 1 
    [0.125, 0.128) = 0 
    [0.128, 0.130) = 0 
    [0.130, 0.133) = 1 
    [0.133, 0.135) = 0 
    [0.135, 0.138) = 0 
    [0.138, 0.140) = 0 
    [0.140, 0.143) = 0 
    [0.143, 0.145) = 0 
    [0.145, 0.148) = 1 

  Percentiles, s/op:
      p(0.0000) =      0.107 s/op
     p(50.0000) =      0.123 s/op
     p(90.0000) =      0.146 s/op
     p(95.0000) =      0.146 s/op
     p(99.0000) =      0.146 s/op
     p(99.9000) =      0.146 s/op
     p(99.9900) =      0.146 s/op
     p(99.9990) =      0.146 s/op
     p(99.9999) =      0.146 s/op
    p(100.0000) =      0.146 s/op


# Run complete. Total time: 00:00:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                              (benchmarkHashSet)  Mode  Cnt  Score   Error  Units
DatafileSetBenchmark.benchmarkSetAdds                true    ss    5  0.123 ± 0.115   s/op
DatafileSetBenchmark.benchmarkSetAdds               false    ss    5  0.123 ± 0.062   s/op

Benchmark result is saved to /home/amogh-jahagirdar/workspace/iceberg/core/build/reports/jmh/results.json
